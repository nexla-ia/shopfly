import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Switch,
  Alert,
  Modal,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { useRouter } from 'expo-router';
import { ArrowLeft, MapPin, Cookie, Shield, Mail, X, Info } from 'lucide-react-native';
import { useTheme } from '@/context/ThemeContext';
import { supabase } from '@/lib/supabase';

interface CookieSettings {
  essential: boolean;
  analytics: boolean;
  performance: boolean;
  functional: boolean;
}

export default function PrivacyScreen() {
  const router = useRouter();
  const { colors } = useTheme();
  const [locationPermission, setLocationPermission] = useState(true);
  const [emailVerification, setEmailVerification] = useState(false);
  const [showModal, setShowModal] = useState(false);
  const [modalContent, setModalContent] = useState({ title: '', content: '' });
  const [cookieSettings, setCookieSettings] = useState<CookieSettings>({
    essential: true, // Sempre habilitado
    analytics: false,
    performance: true,
    functional: true,
  });

  const handleLocationToggle = (value: boolean) => {
    if (!value) {
      Alert.alert(
        'Desabilitar Localiza√ß√£o',
        'Ao desabilitar, voc√™ n√£o receber√° ofertas personalizadas da sua regi√£o e o rastreamento de entregas pode ser limitado.',
        [
          { text: 'Cancelar', style: 'cancel' },
          { text: 'Desabilitar', onPress: () => setLocationPermission(false) },
        ]
      );
    } else {
      setLocationPermission(true);
    }
  };

  const handleEmailVerificationToggle = (value: boolean) => {
    if (value) {
      Alert.alert(
        'Ativar Verifica√ß√£o por E-mail',
        'Um c√≥digo ser√° enviado para seu e-mail sempre que houver altera√ß√µes sens√≠veis na conta.',
        [
          { text: 'Cancelar', style: 'cancel' },
          { text: 'Ativar', onPress: () => setEmailVerification(true) },
        ]
      );
    } else {
      setEmailVerification(false);
    }
  };

  const handleCookieToggle = (type: keyof CookieSettings, value: boolean) => {
    if (type === 'essential') {
      Alert.alert(
        'Cookies Essenciais',
        'Estes cookies s√£o necess√°rios para o funcionamento b√°sico do aplicativo e n√£o podem ser desabilitados.'
      );
      return;
    }

    setCookieSettings(prev => ({
      ...prev,
      [type]: value,
    }));
  };

  const showInfoModal = (type: 'privacy' | 'cookies') => {
    const content = {
      privacy: {
        title: 'Pol√≠tica de Privacidade',
        content: `Nossa Pol√≠tica de Privacidade explica como coletamos, usamos e protegemos suas informa√ß√µes pessoais:

üìä Coleta de Dados:
‚Ä¢ Informa√ß√µes de conta (nome, e-mail, telefone)
‚Ä¢ Dados de navega√ß√£o e prefer√™ncias
‚Ä¢ Hist√≥rico de compras e avalia√ß√µes
‚Ä¢ Localiza√ß√£o (quando autorizada)

üîí Uso dos Dados:
‚Ä¢ Processar pedidos e entregas
‚Ä¢ Personalizar ofertas e recomenda√ß√µes
‚Ä¢ Melhorar nossos servi√ßos
‚Ä¢ Comunica√ß√£o sobre pedidos

üõ°Ô∏è Prote√ß√£o:
‚Ä¢ Criptografia SSL em todas as transa√ß√µes
‚Ä¢ Servidores seguros e certificados
‚Ä¢ Acesso restrito aos dados
‚Ä¢ Conformidade com LGPD

üë§ Seus Direitos:
‚Ä¢ Acessar seus dados
‚Ä¢ Corrigir informa√ß√µes
‚Ä¢ Excluir conta
‚Ä¢ Portabilidade de dados`
      },
      cookies: {
        title: 'Como Funcionam os Cookies',
        content: `Os cookies s√£o pequenos arquivos que melhoram sua experi√™ncia no app:

üç™ Tipos de Cookies:

üîß Essenciais (Obrigat√≥rios):
‚Ä¢ Login e autentica√ß√£o
‚Ä¢ Carrinho de compras
‚Ä¢ Prefer√™ncias b√°sicas
‚Ä¢ Seguran√ßa da sess√£o

üìä Anal√≠ticos (Opcionais):
‚Ä¢ P√°ginas mais visitadas
‚Ä¢ Tempo de navega√ß√£o
‚Ä¢ Produtos mais buscados
‚Ä¢ Relat√≥rios de uso

‚ö° Desempenho (Opcionais):
‚Ä¢ Carregamento mais r√°pido
‚Ä¢ Cache de imagens
‚Ä¢ Otimiza√ß√£o de busca
‚Ä¢ Redu√ß√£o de dados

üéØ Funcionais (Opcionais):
‚Ä¢ Recomenda√ß√µes personalizadas
‚Ä¢ Hist√≥rico de navega√ß√£o
‚Ä¢ Prefer√™ncias salvas
‚Ä¢ Localiza√ß√£o de lojas

üîÑ Gerenciamento:
‚Ä¢ Voc√™ controla quais aceitar
‚Ä¢ Pode alterar a qualquer momento
‚Ä¢ Essenciais n√£o podem ser desabilitados
‚Ä¢ Dados an√¥nimos e seguros`
      }
    };
    
    setModalContent(content[type]);
    setShowModal(true);
  };

  const cookieOptions = [
    {
      key: 'essential' as keyof CookieSettings,
      title: 'Essenciais',
      description: 'Necess√°rios ao funcionamento do app',
      required: true,
    },
    {
      key: 'analytics' as keyof CookieSettings,
      title: 'Anal√≠ticos',
      description: 'Ajudam a melhorar nossos servi√ßos',
      required: false,
    },
    {
      key: 'performance' as keyof CookieSettings,
      title: 'Desempenho',
      description: 'Otimizam algumas fun√ß√µes do app',
      required: false,
    },
    {
      key: 'functional' as keyof CookieSettings,
      title: 'Funcionais',
      description: 'Mant√™m o bom funcionamento e personaliza√ß√£o',
      required: false,
    },
  ];

  return (
    <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>
      {/* Header */}
      <View style={[styles.header, { backgroundColor: colors.primary }]}>
        <TouchableOpacity onPress={() => router.back()}>
          <ArrowLeft size={24} color="#FFFFFF" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Dados e Privacidade</Text>
        <View style={{ width: 24 }} />
      </View>

      <ScrollView showsVerticalScrollIndicator={false}>
        {/* Permiss√µes de Localiza√ß√£o */}
        <View style={[styles.section, { backgroundColor: colors.surface }]}>
          <View style={styles.sectionHeader}>
            <MapPin size={24} color={colors.primary} />
            <Text style={[styles.sectionTitle, { color: colors.text }]}>
              Permiss√µes de Localiza√ß√£o
            </Text>
          </View>
          
          <Text style={[styles.sectionDescription, { color: colors.textSecondary }]}>
            Permita ou negue o uso de dados de localiza√ß√£o do dispositivo para acesso a ofertas na sua regi√£o e rastreamento de entregas.
          </Text>
          
          <View style={styles.settingRow}>
            <View style={styles.settingInfo}>
              <Text style={[styles.settingTitle, { color: colors.text }]}>
                Usar localiza√ß√£o
              </Text>
              <Text style={[styles.settingSubtitle, { color: colors.textSecondary }]}>
                {locationPermission ? 'Ativado - Ofertas personalizadas habilitadas' : 'Desativado - Funcionalidades limitadas'}
              </Text>
            </View>
            <Switch
              value={locationPermission}
              onValueChange={handleLocationToggle}
              trackColor={{ false: '#E5E7EB', true: colors.primary }}
              thumbColor="#FFFFFF"
            />
          </View>
        </View>

        {/* Configurar Cookies */}
        <View style={[styles.section, { backgroundColor: colors.surface }]}>
          <View style={styles.sectionHeader}>
            <Cookie size={24} color={colors.primary} />
            <Text style={[styles.sectionTitle, { color: colors.text }]}>
              Configurar Cookies
            </Text>
          </View>
          
          <Text style={[styles.sectionDescription, { color: colors.textSecondary }]}>
            Escolha quais tipos de cookies deseja autorizar:
          </Text>
          
          {cookieOptions.map((option) => (
            <View key={option.key} style={styles.settingRow}>
              <View style={styles.settingInfo}>
                <View style={styles.settingTitleRow}>
                  <Text style={[styles.settingTitle, { color: colors.text }]}>
                    {option.title}
                  </Text>
                  {option.required && (
                    <View style={styles.requiredBadge}>
                      <Text style={styles.requiredText}>Obrigat√≥rio</Text>
                    </View>
                  )}
                </View>
                <Text style={[styles.settingSubtitle, { color: colors.textSecondary }]}>
                  {option.description}
                </Text>
              </View>
              <Switch
                value={cookieSettings[option.key]}
                onValueChange={(value) => handleCookieToggle(option.key, value)}
                trackColor={{ false: '#E5E7EB', true: colors.primary }}
                thumbColor="#FFFFFF"
                disabled={option.required}
              />
            </View>
          ))}
        </View>

        {/* Verifica√ß√£o de Conta */}
        <View style={[styles.section, { backgroundColor: colors.surface }]}>
          <View style={styles.sectionHeader}>
            <Shield size={24} color={colors.primary} />
            <Text style={[styles.sectionTitle, { color: colors.text }]}>
              Verifica√ß√£o de Conta
            </Text>
          </View>
          
          <Text style={[styles.sectionDescription, { color: colors.textSecondary }]}>
            Solicite o envio de um c√≥digo √∫nico para seu e-mail cadastrado sempre que for necess√°ria valida√ß√£o de altera√ß√µes sens√≠veis.
          </Text>
          
          <View style={styles.settingRow}>
            <View style={styles.settingInfo}>
              <Text style={[styles.settingTitle, { color: colors.text }]}>
                Verifica√ß√£o por E-mail
              </Text>
              <View style={styles.emailInfo}>
                <Mail size={16} color={colors.textSecondary} />
                <Text style={[styles.emailText, { color: colors.textSecondary }]}>
                  joao.silva@email.com
                </Text>
              </View>
              <Text style={[styles.settingSubtitle, { color: colors.textSecondary }]}>
                {emailVerification 
                  ? 'C√≥digos ser√£o enviados para validar altera√ß√µes' 
                  : 'Verifica√ß√£o adicional desabilitada'
                }
              </Text>
            </View>
            <Switch
              value={emailVerification}
              onValueChange={handleEmailVerificationToggle}
              trackColor={{ false: '#E5E7EB', true: colors.primary }}
              thumbColor="#FFFFFF"
            />
          </View>
        </View>

        {/* Informa√ß√µes Adicionais */}
        <View style={[styles.infoSection, { backgroundColor: colors.surface }]}>
          <Text style={[styles.infoTitle, { color: colors.text }]}>
            üìã Informa√ß√µes Importantes
          </Text>
          <Text style={[styles.infoText, { color: colors.textSecondary }]}>
            ‚Ä¢ Suas configura√ß√µes de privacidade s√£o salvas automaticamente{'\n'}
            ‚Ä¢ Cookies essenciais n√£o podem ser desabilitados{'\n'}
            ‚Ä¢ A localiza√ß√£o √© usada apenas para melhorar sua experi√™ncia{'\n'}
            ‚Ä¢ Voc√™ pode alterar essas configura√ß√µes a qualquer momento
          </Text>
        </View>

        {/* Links √öteis */}
        <View style={[styles.linksSection, { backgroundColor: colors.surface }]}>
          <TouchableOpacity 
            style={styles.linkButton}
            onPress={() => showInfoModal('privacy')}
          >
            <Info size={16} color={colors.primary} />
            <Text style={[styles.linkText, { color: colors.primary }]}>
              Pol√≠tica de Privacidade Completa
            </Text>
          </TouchableOpacity>
          
          <TouchableOpacity 
            style={styles.linkButton}
            onPress={() => showInfoModal('cookies')}
          >
            <Cookie size={16} color={colors.primary} />
            <Text style={[styles.linkText, { color: colors.primary }]}>
              Saiba mais sobre Cookies
            </Text>
          </TouchableOpacity>
        </View>
      </ScrollView>

      {/* Modal Informativo */}
      <Modal
        visible={showModal}
        transparent
        animationType="slide"
        onRequestClose={() => setShowModal(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={[styles.modalContent, { backgroundColor: colors.surface }]}>
            <View style={[styles.modalHeader, { borderBottomColor: colors.border }]}>
              <Text style={[styles.modalTitle, { color: colors.text }]}>
                {modalContent.title}
              </Text>
              <TouchableOpacity
                onPress={() => setShowModal(false)}
                style={styles.closeButton}
              >
                <X size={24} color={colors.textSecondary} />
              </TouchableOpacity>
            </View>
            
            <ScrollView style={styles.modalBody} showsVerticalScrollIndicator={false}>
              <Text style={[styles.modalText, { color: colors.textSecondary }]}>
                {modalContent.content}
              </Text>
            </ScrollView>
            
            <TouchableOpacity
              style={[styles.modalCloseButton, { backgroundColor: colors.primary }]}
              onPress={() => setShowModal(false)}
            >
              <Text style={styles.modalCloseButtonText}>Entendi</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    padding: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#5B21B6',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: '700',
    color: '#FFFFFF',
  },
  section: {
    marginHorizontal: 20,
    marginTop: 20,
    borderRadius: 16,
    padding: 20,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  sectionHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '700',
    marginLeft: 12,
  },
  sectionDescription: {
    fontSize: 14,
    lineHeight: 20,
    marginBottom: 20,
  },
  settingRow: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#F1F5F9',
    marginBottom: 12,
  },
  settingInfo: {
    flex: 1,
    marginRight: 16,
  },
  settingTitleRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 4,
  },
  settingTitle: {
    fontSize: 16,
    fontWeight: '600',
    marginRight: 8,
  },
  requiredBadge: {
    backgroundColor: '#FEE2E2',
    paddingHorizontal: 8,
    paddingVertical: 2,
    borderRadius: 12,
  },
  requiredText: {
    fontSize: 10,
    fontWeight: '700',
    color: '#DC2626',
  },
  settingSubtitle: {
    fontSize: 14,
    lineHeight: 18,
  },
  emailInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    marginVertical: 4,
  },
  emailText: {
    fontSize: 14,
    marginLeft: 6,
    fontWeight: '500',
  },
  infoSection: {
    marginHorizontal: 20,
    marginTop: 20,
    borderRadius: 16,
    padding: 20,
    borderWidth: 1,
    borderColor: '#E0E7FF',
  },
  infoTitle: {
    fontSize: 16,
    fontWeight: '700',
    marginBottom: 12,
  },
  infoText: {
    fontSize: 14,
    lineHeight: 22,
  },
  linksSection: {
    marginHorizontal: 20,
    marginTop: 20,
    marginBottom: 40,
    borderRadius: 16,
    padding: 20,
  },
  linkButton: {
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#F1F5F9',
    flexDirection: 'row',
    alignItems: 'center',
  },
  linkText: {
    fontSize: 16,
    fontWeight: '600',
    marginLeft: 8,
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  modalContent: {
    borderRadius: 20,
    width: '100%',
    maxWidth: 500,
    maxHeight: '80%',
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 20,
    borderBottomWidth: 1,
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: '700',
  },
  closeButton: {
    padding: 4,
  },
  modalBody: {
    padding: 20,
    maxHeight: 400,
  },
  modalText: {
    fontSize: 14,
    lineHeight: 22,
  },
  modalCloseButton: {
    margin: 20,
    paddingVertical: 14,
    borderRadius: 12,
    alignItems: 'center',
  },
  modalCloseButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '700',
  },
});